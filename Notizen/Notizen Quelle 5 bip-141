Quelle 5: bip-141 (https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki)

Abstract:
new witness structure -> seperate from merkle transaction tree
only for validation, not needed for checking transaction effect
-> scripts and signatures are moved there
extra witness tree that is nested into merkle root so it is soft fork compatible
future hard for could place this tree in its own branch

Motivation:
all transaction's effects are determined by spends (UTXO) and new outputs
removing witness data from the transction structure several prolems are fixed:
	transaction malleability is solved because signature data is no longer part of transaction identification
	prevents involuntary transaction malleability as long as all inputs are signed
	In the case of an m-of-n CHECKMULTISIG script, a transaction is malleable only with agreement of m private key holders
	It allows creation of unconfirmed transaction dependency chains without counterparty risk -> makes Lightning Network possible
transmission of signature data becomes optional
	only needed if peer is trying to validate instead of just checking existence
	reduces size of simple payment verifications (verify if transaction happend using merkle tree)
constraints could be bypassed with soft fork
	size of witness ignored / discounted -> increases block size to some extent
	maximum dat push size or sigops limit reevaluated/removed
	new script system could be introduced

Specification:
Transacion ID:
	new 'witness' data structure defined -> 2 IDs per transaction
	txid unchanged -> double SHA256 of traditional serialization format ([nVersion][txins][txouts][nLockTime])
	new wtxid -> double SHA256 of new serialization with witness data ([nVersion][marker][flag][txins][txouts][witness][nLockTime])
	marker must be 0x00, flag must be 1-byte non-zero value (currently must be 0x01 (can be used as bitvector for future datatypes of witness data))
	witness is serialization of all witness data of the transaction
	each txin accosiated with a witness field.
	witness field starts with var_int to indicate number of stack items for txin
	each stack item starts with var_int indicating the length of it
	non-witness program must habe empty witness field(0x00) 
	if all txins are non-witness, wtxid = txid
Commitment structure:
	new bock rule requires commitment to wtxid
	wtxid of coinbase transaction is 0x0000....0000
	witness root hash is calculated with all thos wtxid as leaves, similar to hashMerkleRoot
	commitment is recorded in scriptPubKey of coinbase transaction, must be at least 38 bytes with:
		1-byte - OP_RETURN (0x6a)
		1-byte - Push the following 36 bytes (0x24)
		4-byte - Commitment header (0xaa21a9ed)
		32-byte - Commitment hash: Double-SHA256(witness root hash|witness reserved value)
  
		39th byte onwards: Optional data with no consensus meaning
	coinbase's input's witness must consist of a single 32-byte array for the witness reserved value
	if there are more than one scriptPubKey matching the pattern the one with highest output index is assumed to be the commitment
	if all transactions in a block do not have witness data, the commitment is optional.
Witness program:
	scriptPubKey that consists of a 1-byte push opcode followed by dat push between 2 and 40 bytes gets new meaning
	value of first push is called 'version byte'
	following byte vector pushed is called 'witness program'
	two cases in which witness validation logic are triggered
	each case determines location of witness version byte and program as well as form of scriptSig
		1. triggered by scripPubKey being exactly a push push of version byte plus push of witness program
		   scriptSig must be empty or validation fails ("native witness program")
		2. triggered when scripPubKey is P2SH and redeemScript psuhed in scriptSig is push of version byte plus push of witness program
		   scriptSig must be push of redeemScript or validation fails ("P2SH witness program")
	version byte: 0, witness program: 20 bytes
		interpreted as pay-to-witness-public-key-hash (P2WPKH) program
		witness must consist of exactly 2 items: first signature, second public key
		HASH160 of public key must match 20-byte witness program
		after normal script evaluation, signature must be verified against public with CHECKSIG -> must result in single true on stack
	version byte: 0, witness program: 32 bytes
		interpreted as pay-to-witness-script-hash (P2WSH) program
		witness must consist of an input stack feeding script, followed by serialized script (witnessScript)
		witnessScript is popped off initial witness stack
		SHA256 of witnessScript must match 32-byte witness program
		witnessScript deserialiced and executed after script evaluation with remaining witness stack
		script must not fail and result in single true on stack
	version byte: 0, witness program neither 20 nor 32 -> script must fail
	version byte 1 to 16 not defined yet -> reserved for future extensions
Other consensus critical limits
	Block size
		Blocks limited to 1,000,000 bytes (1 MB) total size
		change restriction with block weight
		Block weight defined as Base size * 3 + Total size
		Base size is block size in bytes with original serialization without witness -> as seen by non-upgraded node
		Total size is block size in bytes with transactions serialized, including base data and witness data
		new Rule: block weight <= 4,000,000
	Sigops
		Sigops per block limited to 20,000
		changed as follows:
		sigops in current pubkey script, signature script and P2SH check script are counted 4 times, sigop limit quadrupled to 80,000
		P2WPKH input counted as 1 sigop
		opcodes within P2WSH witnessScript counted identcally as previously within P2SH redeemScript
		CHECKSIG counted as 1 sigop
		CHECKMULTISIG counted as 1 to 20 sigops, according to it's arguments
		applies to native witness program and P2SH witness program
Additional definitions
	not used for consensus limits, but suggested for language consistency
	Transacion size calculations
		Transacion weight defined as Base transaction size * 3 + Total transaction size (same method as calculating Block weight)
		Virtual transaction size as Transacion weight / 4 (rounded up)
		Base transaction size as size of transaction serialized without witness data
		Total transaction size as transaction size in bytes serialized wizh witness data
New script semantics
	P2WPKH and P2WSH similar to pre-segwit script, but there are differences:
		script spendable pre-segwit not neccesarily spendable as P2WPKH or P2WSH
		New mining policies included in first release
			 1. only compressed public keys in P2WPKH and P2WSH
			 2. argument of OP_IF/NOTIF in P2WSH must be minimal
			 3. signature(s) must be null vector(s) if an OP_CHECKSIG or OP_CHECKMULTISIG is failed (for both pre-segregated witness script and P2WSH)
Extensible commitment structure
	new commitment in coinbase transaction is hash of witness root hash and witness reserved value
	witness reserved value currently no consensus meaning, but new future commitment values for soft forks
Trust-free unconfirmed transaction dependency chain
	segwit fixes transaction malleability -> enables building unconfirmed transaction dependency chains trust-free
	falls lightning network genauer soll: Two parties, Alice and Bob, may agree to send certain amount of Bitcoin to a 2-of-2 multisig output (the "funding transaction"). Without signing the funding transaction, they may create another transaction, time-locked in the future, spending the 2-of-2 multisig output to third account(s) (the "spending transaction"). Alice and Bob will sign the spending transaction and exchange the signatures. After examining the signatures, they will sign and commit the funding transaction to the blockchain. Without further action, the spending transaction will be confirmed after the lock-time and release the funding according to the original contract. It also retains the flexibility of revoking the original contract before the lock-time, by another spending transaction with shorter lock-time, but only with mutual-agreement of both parties.Such setups are not possible with BIP62 as the malleability fix, since the spending transaction could not be created without both parties first signing the funding transaction. If Alice reveals the funding transaction signature before Bob does, Bob is able to lock up the funding indefinitely without ever signing the spending transaction. Unconfirmed transaction dependency chain is a fundamental building block of more sophisticated payment networks, such as duplex micropayment channel and the Lightning Network, which have the potential to greatly improve the scalability and efficiency of the Bitcoin system.
Future extensions
	Compact fraud proof for SPV nodes
		bitcoin only has two security models
			run a full node, which validates every block in the system
			SPV, which only validates headers as proof of publication
		whitepaper suggests that SPV may accept alerts from full-nodes -> could become DoS attack vector, because no cost for false alarm
		-> alarm must come with fraud proof
		proofing a fraud is not possible in these cases:
			1. not possible to prove a miner introduces too many bitcoins in coinbase transaction without showing the whole Block and all input transactions
			2. not possible to prove violation of block specific constraints (size, sigop limit) without showing the whole Block
			3. not possible to prove spending of non-existing input without showing all transaction IDs way back to the genesis block
		extra witness data allowing short proofs:
			1. sum trees for transaction fees can be commited for short proofs that miner does not add excessive fees to coinbase transaction (same with sigop count)
			2. backlinks for outputs spent by transaction's input consisting of block hash plus offset to easily verify that the output exists
		these commitments could be included in extensible commitment structure through soft fork and will be transparent to nodes not knowing the new rules
	New script system
		segwit enables new script systems such as:
			Schnorr signatures which reduce size of multisig transactions dramatically
			Lamport signature which is quantum computing resistant
			Merklized abstract syntax trees which allow very compact witness for conditional scripts with extreme complexity
	Per-input lock-time and relative-lock-time
		currently only one nLockTime in a transaction so all inputs must share the value
		soft fork could introduce new per-input lock-time and relative-lock-time
Backward compatibility
	being a soft fork, older software will work without having to change it
	but non-upgraded nodes will not see or validate witness data and consider witness programs as anyone-can-spend scripts
	non-upgraded nodes should definitely upgrade, because they should always be wary of anyone-can-spend scripts
	What a non-upgraded wallet can do:
		recieving bitcoin from non-upgraded/upgraded wallets
		sending bitcoin traditionally to non-upgraded/upgraded with P2PKH address
		sending bitcoin to upgraded wallets using P2SH address
		sending bitcoin to upgraded wallets using native witness program
	What a non-upgraded wallet cannot do:
		validate segregated witness transaction. It always assumes transaction is valid
Deployment
	BIP-141 will be deployed by 'version bits' with name 'segwit' using bit 1
	For Bitcoin mainnet start at midnight 15.11.2016 UTC
	timeout exactly one year later
	
	For Bitcoin testnet start at midnight 01.05.2016 UTC
	timeout exactly one year later